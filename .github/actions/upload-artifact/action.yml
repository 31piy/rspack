name: Upload Artifact

description: Upload file to local or artifact to quickly share files between jobs

inputs:
  cache-type:
    description: "Use github or local or lynx cache"
    required: true
    type: string
    choices:
      - github
      - local
      - lynx
  name:
    description: "Artifact name"
    default: "artifact"
  path:
    description: "A file, directory or wildcard pattern that describes what to upload"
    required: true

outputs:
  runner-labels:
    description: "The runner labels that download artifact action should run on"
    value: ${{ steps.upload-local.outputs.runner-labels }}

runs:
  using: composite
  steps:
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      if: ${{ inputs.cache-type == 'github' }}
      with:
        name: ${{ inputs.name }}
        path: ${{ inputs.path }}
        if-no-files-found: error
        overwrite: true

    - name: Upload artifact
      uses: lynx-infra/cache/save@main
      if: ${{ inputs.cache-type == 'lynx' }}
      with:
        path: ${{ inputs.path }}
        key: rust-artifact-${{ github.repository_id }}-${{ github.sha }}-${{ inputs.name }}
      env:
        ACCESS_KEY: ${{ env.TOS_ACCESS_KEY }}
        SECRET_KEY: ${{ env.TOS_SECRET_KEY }}
        BUCKET_NAME: ${{ env.TOS_BUCKET_NAME }}
        REGION: ${{ env.TOS_REGION }}
        ENDPOINT: ${{ env.TOS_ENDPOINT }}

    - name: Upload local
      id: upload-local
      if: ${{ inputs.cache-type == 'local' }}
      shell: bash
      run: |
        set -e
        cache_dir=$HOME/.cache/runner
        if [[ ! -d "$cache_dir" ]]; then
          mkdir -p "$cache_dir"
        fi
        # clear cache directory older than 3 hours
        find $cache_dir -type d -maxdepth 1 -mindepth 1 -cmin +180 | xargs rm -rf

        # save file
        save_dir="$cache_dir/${{ github.repository_id }}-${{ github.sha }}-${{ inputs.name }}"
        rm -rf $save_dir
        mkdir $save_dir

        mv -f ${{ inputs.path }} $save_dir
        echo "mv -f ${{ inputs.path }} $save_dir"

        # TODO echo machine name as runner labels
        # echo "runner_labels=\"$(uname -n)\"" >> "$GITHUB_OUTPUT"
        if [ -z "$RUNNER_LABELS" ]; then
          # RUNNER_LABELS not exist
          echo "self hosted runner must exist RUNNER_LABELS variable"
          exit 1
        fi

        labelJson="[\"${RUNNER_LABELS//,/\",\"}\"]"
        echo "runner-labels=$labelJson" >> "$GITHUB_OUTPUT"
